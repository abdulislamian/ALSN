// <auto-generated />
using System;
using ALSN.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ALSN.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231207123532_intialDBMigration")]
    partial class intialDBMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ALSN.Domain.Entities.Documents.DocumentsType", b =>
                {
                    b.Property<int>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<string>("documentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isFixedPrice")
                        .HasColumnType("bit");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.HasKey("DocTypeId");

                    b.ToTable("DocumentsTypes");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Documents.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("TranslatorId")
                        .HasColumnType("int");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("translationId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("TranslatorId")
                        .IsUnique();

                    b.HasIndex("translationId")
                        .IsUnique();

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Documents.TranslationPrice", b =>
                {
                    b.Property<int>("TranslationPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TranslationPriceId"));

                    b.Property<int>("documentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("sourceLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("targetLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TranslationPriceId");

                    b.ToTable("translationPrices");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuestId"));

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizationLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuestId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Tickets.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketId");

                    b.HasIndex("GuestId");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Translation.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandMark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Translation.Translation", b =>
                {
                    b.Property<int>("TranslationRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TranslationRequestId"));

                    b.Property<string>("AmendmentReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AmendmentRequestDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DocumentRequestTypeDocTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAmendmentRequested")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCertificationOfDocument")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivery")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiscountRequested")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExtendTimeForValidity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQuotationRequested")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSMSTracking")
                        .HasColumnType("bit");

                    b.Property<int>("RequestDeliveryAddresssId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RequestTranslationFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ServiceCategoryType")
                        .HasColumnType("int");

                    b.Property<decimal>("ServiceCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SourceLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TargetLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TranslationPriceId")
                        .HasColumnType("int");

                    b.Property<long>("WordCount")
                        .HasColumnType("bigint");

                    b.HasKey("TranslationRequestId");

                    b.HasIndex("DocumentRequestTypeDocTypeId");

                    b.HasIndex("GuestId");

                    b.HasIndex("RequestDeliveryAddresssId");

                    b.HasIndex("TranslationPriceId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.TranslationOffice.DeliveryService.ServiceCategory", b =>
                {
                    b.Property<int>("serviceCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("serviceCatId"));

                    b.Property<string>("RequiredTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ServiceFee")
                        .HasColumnType("float");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("serviceCatId");

                    b.ToTable("serviceCategories");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.TranslationOffice.Order.OrderAssign", b =>
                {
                    b.Property<int>("assignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("assignId"));

                    b.Property<int>("TranslationId")
                        .HasColumnType("int");

                    b.Property<int>("TranslatorId")
                        .HasColumnType("int");

                    b.HasKey("assignId");

                    b.HasIndex("TranslationId")
                        .IsUnique();

                    b.HasIndex("TranslatorId")
                        .IsUnique();

                    b.ToTable("orderAssigns");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.TranslationOffice.TranslOffice", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompOwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizationLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalNoOfTranslators")
                        .HasColumnType("int");

                    b.HasKey("OfficeId");

                    b.ToTable("translOffices");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.TranslationOffice.TranslOfficeDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("TransOfficeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("accountHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("accountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("commissionPercentage")
                        .HasColumnType("int");

                    b.Property<int>("transOfficesOfficeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("transOfficesOfficeId");

                    b.ToTable("translOfficeDetails");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.BankDetails", b =>
                {
                    b.Property<int>("bankDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bankDetailId"));

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchCode")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranslatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TranslatorId1")
                        .HasColumnType("int");

                    b.HasKey("bankDetailId");

                    b.HasIndex("TranslatorId1");

                    b.ToTable("bankDetails");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TranslatorId")
                        .HasColumnType("int");

                    b.HasKey("LanguageId");

                    b.HasIndex("TranslatorId");

                    b.ToTable("languages");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Orders.AcceptedOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TranslationId")
                        .HasColumnType("int");

                    b.Property<int>("TranslatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TranslationId");

                    b.HasIndex("TranslatorId");

                    b.ToTable("acceptedOrders");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Orders.RejectOrder", b =>
                {
                    b.Property<int>("RejectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RejectionId"));

                    b.Property<string>("DeclineReasonDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeclineReasonSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TranslationId")
                        .HasColumnType("int");

                    b.HasKey("RejectionId");

                    b.HasIndex("TranslationId");

                    b.ToTable("rejectOrders");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Translator", b =>
                {
                    b.Property<int>("TranslatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TranslatorId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizationLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransOfficeId")
                        .HasColumnType("int");

                    b.Property<int>("TranslOfficeOfficeId")
                        .HasColumnType("int");

                    b.Property<string>("fullAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TranslatorId");

                    b.HasIndex("TranslOfficeOfficeId");

                    b.ToTable("Translators");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.User.Coupons.Coupons", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("couponCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("discountType")
                        .HasColumnType("int");

                    b.Property<int>("discountValue")
                        .HasColumnType("int");

                    b.Property<int>("minimumOrderAmount")
                        .HasColumnType("int");

                    b.Property<int>("usersUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("validFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("validTo")
                        .HasColumnType("datetime2");

                    b.HasKey("CouponId");

                    b.HasIndex("usersUserId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.User.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.User.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolesRoleId")
                        .HasColumnType("int");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Documents.DocumentsType", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Documents.TranslationPrice", "TranslationPrice")
                        .WithOne("DocumentsType")
                        .HasForeignKey("ALSN.Domain.Entities.Documents.DocumentsType", "DocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TranslationPrice");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Documents.Feedback", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Translator.Translator", "Translator")
                        .WithOne("feedback")
                        .HasForeignKey("ALSN.Domain.Entities.Documents.Feedback", "TranslatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALSN.Domain.Entities.Guest.Translation.Translation", "Translation")
                        .WithOne("feedback")
                        .HasForeignKey("ALSN.Domain.Entities.Documents.Feedback", "translationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Translation");

                    b.Navigation("Translator");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Tickets.Ticket", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Guest.Guest", "Guest")
                        .WithMany("Tickets")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Translation.Translation", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Documents.DocumentsType", "DocumentRequestType")
                        .WithMany()
                        .HasForeignKey("DocumentRequestTypeDocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALSN.Domain.Entities.Guest.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALSN.Domain.Entities.Guest.Translation.Address", "RequestDeliveryAddresss")
                        .WithMany()
                        .HasForeignKey("RequestDeliveryAddresssId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALSN.Domain.Entities.Documents.TranslationPrice", "translationPrice")
                        .WithMany()
                        .HasForeignKey("TranslationPriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentRequestType");

                    b.Navigation("Guest");

                    b.Navigation("RequestDeliveryAddresss");

                    b.Navigation("translationPrice");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.TranslationOffice.Order.OrderAssign", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Guest.Translation.Translation", "translation")
                        .WithOne("OrderAssign")
                        .HasForeignKey("ALSN.Domain.Entities.TranslationOffice.Order.OrderAssign", "TranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALSN.Domain.Entities.Translator.Translator", "translators")
                        .WithOne("OrderAssign")
                        .HasForeignKey("ALSN.Domain.Entities.TranslationOffice.Order.OrderAssign", "TranslatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("translation");

                    b.Navigation("translators");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.TranslationOffice.TranslOfficeDetails", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.TranslationOffice.TranslOffice", "transOffices")
                        .WithMany()
                        .HasForeignKey("transOfficesOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("transOffices");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.BankDetails", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Translator.Translator", "translator")
                        .WithMany()
                        .HasForeignKey("TranslatorId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("translator");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Language", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Translator.Translator", null)
                        .WithMany("languages")
                        .HasForeignKey("TranslatorId");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Orders.AcceptedOrders", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Guest.Translation.Translation", "translation")
                        .WithMany()
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALSN.Domain.Entities.Translator.Translator", "translator")
                        .WithMany()
                        .HasForeignKey("TranslatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("translation");

                    b.Navigation("translator");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Orders.RejectOrder", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Guest.Translation.Translation", "translation")
                        .WithMany()
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("translation");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Translator", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.TranslationOffice.TranslOffice", "TranslOffice")
                        .WithMany()
                        .HasForeignKey("TranslOfficeOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TranslOffice");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.User.Coupons.Coupons", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.User.User", "users")
                        .WithMany()
                        .HasForeignKey("usersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.User.User", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.User.Role", "Roles")
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Documents.TranslationPrice", b =>
                {
                    b.Navigation("DocumentsType")
                        .IsRequired();
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Guest", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Translation.Translation", b =>
                {
                    b.Navigation("OrderAssign")
                        .IsRequired();

                    b.Navigation("feedback")
                        .IsRequired();
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Translator", b =>
                {
                    b.Navigation("OrderAssign")
                        .IsRequired();

                    b.Navigation("feedback")
                        .IsRequired();

                    b.Navigation("languages");
                });
#pragma warning restore 612, 618
        }
    }
}
