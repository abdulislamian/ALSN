// <auto-generated />
using System;
using ALSN.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ALSN.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ALSN.Domain.Entities.Documents.DocumentsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("documentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isFixedPrice")
                        .HasColumnType("bit");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DocumentsType");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Documents.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("TranslationId")
                        .HasColumnType("int");

                    b.Property<string>("TranslatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("TranslationId");

                    b.HasIndex("TranslatorId");

                    b.ToTable("feedback");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Documents.TranslationPrice", b =>
                {
                    b.Property<int>("TranslationPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TranslationPriceId"));

                    b.Property<int>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("sourceLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("targetLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TranslationPriceId");

                    b.HasIndex("DocTypeId");

                    b.ToTable("translationPrice");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Tickets.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketId");

                    b.HasIndex("GuestId");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Translation.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandMark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Translation.Translation", b =>
                {
                    b.Property<int>("TranslationRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TranslationRequestId"));

                    b.Property<string>("AmendmentReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AmendmentRequestDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DocumentRequestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("GuestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAmendmentRequested")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCertificationOfDocument")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivery")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiscountRequested")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExtendTimeForValidity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQuotationRequested")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSMSTracking")
                        .HasColumnType("bit");

                    b.Property<int>("RequestDeliveryAddresssId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RequestTranslationFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ServiceCategoryType")
                        .HasColumnType("int");

                    b.Property<decimal>("ServiceCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SourceLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TargetLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TranslationPriceId")
                        .HasColumnType("int");

                    b.Property<long>("WordCount")
                        .HasColumnType("bigint");

                    b.HasKey("TranslationRequestId");

                    b.HasIndex("DocumentRequestTypeId");

                    b.HasIndex("GuestId");

                    b.HasIndex("RequestDeliveryAddresssId");

                    b.HasIndex("TranslationPriceId");

                    b.ToTable("Translation");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.TranslationOffice.Order.OrderAssign", b =>
                {
                    b.Property<int>("assignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("assignId"));

                    b.Property<int>("TranslationId")
                        .HasColumnType("int");

                    b.Property<string>("TranslatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("assignId");

                    b.HasIndex("TranslationId");

                    b.HasIndex("TranslatorId");

                    b.ToTable("orderAssign");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.TranslationOffice.TranslOfficeDetails", b =>
                {
                    b.Property<int>("Detailid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Detailid"));

                    b.Property<string>("TranslOfficeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("accountHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("accountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("commissionPercentage")
                        .HasColumnType("int");

                    b.HasKey("Detailid");

                    b.HasIndex("TranslOfficeId");

                    b.ToTable("translOfficeDetails");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.BankDetails", b =>
                {
                    b.Property<int>("bankDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bankDetailId"));

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchCode")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranslatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("bankDetailId");

                    b.HasIndex("TranslatorId");

                    b.ToTable("bankDetails");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranslatorsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LanguageId");

                    b.HasIndex("TranslatorsId");

                    b.ToTable("language");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Orders.AcceptedOrders", b =>
                {
                    b.Property<int>("AcceptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcceptId"));

                    b.Property<int>("TranslationId")
                        .HasColumnType("int");

                    b.Property<string>("translatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AcceptId");

                    b.HasIndex("TranslationId");

                    b.HasIndex("translatorId");

                    b.ToTable("acceptedOrders");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Orders.RejectOrder", b =>
                {
                    b.Property<int>("RejectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RejectionId"));

                    b.Property<string>("DeclineReasonDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeclineReasonSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TranslationId")
                        .HasColumnType("int");

                    b.HasKey("RejectionId");

                    b.HasIndex("TranslationId");

                    b.ToTable("rejectOrder");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.User.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizationLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "509b7411-1122-49be-a5d6-e616adaf79cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da4d791f-59fd-48f0-92e0-b049a2c4b45a",
                            ContactNo = "03149276066",
                            Email = "sample.applicationuser@example.com",
                            EmailConfirmed = false,
                            FullName = "Abdullah Khan",
                            LocalizationLanguage = "English",
                            LockoutEnabled = false,
                            PasswordHash = "hashed_password_here",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97837b56-c737-49fc-9537-8da50cf7444c",
                            TwoFactorEnabled = false,
                            UserName = "sample.applicationuser"
                        });
                });

            modelBuilder.Entity("ALSN.Domain.Entities.User.Coupons.Coupons", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("couponCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("discountType")
                        .HasColumnType("int");

                    b.Property<int>("discountValue")
                        .HasColumnType("int");

                    b.Property<int>("minimumOrderAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("validFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("validTo")
                        .HasColumnType("datetime2");

                    b.HasKey("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Guest", b =>
                {
                    b.HasBaseType("ALSN.Domain.Entities.User.ApplicationUser");

                    b.HasDiscriminator().HasValue("Guest");

                    b.HasData(
                        new
                        {
                            Id = "ac1c3372-432d-41b8-b86a-87feb2cf846a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5dc4315c-17d2-4ff1-be8b-16fa9d76090e",
                            ContactNo = "03149276066",
                            Email = "sample.guest@example.com",
                            EmailConfirmed = false,
                            FullName = "Sample Guest",
                            LocalizationLanguage = "English",
                            LockoutEnabled = false,
                            PasswordHash = "hashed_password_here",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe7e087a-9738-4d1e-9639-3289b6815465",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("ALSN.Domain.Entities.TranslationOffice.TranslOffice", b =>
                {
                    b.HasBaseType("ALSN.Domain.Entities.User.ApplicationUser");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompOwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalNoOfTranslators")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("TranslOffice");

                    b.HasData(
                        new
                        {
                            Id = "e580075e-6b2c-439a-b164-e001877962d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad4d7305-6efc-434b-b5e6-207342e0ff29",
                            ContactNo = "03149276066",
                            Email = "sample.officer@example.com",
                            EmailConfirmed = false,
                            FullName = "Sample Translation Officer",
                            LocalizationLanguage = "English",
                            LockoutEnabled = false,
                            PasswordHash = "hashed_password_here",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec9bbbfe-94da-4848-a0ab-a9ac05b3c4ed",
                            TwoFactorEnabled = false,
                            City = "Peshawar",
                            CompOwnerName = "ABC",
                            CompanyName = "XYZ company",
                            TotalNoOfTranslators = 0
                        });
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Translators", b =>
                {
                    b.HasBaseType("ALSN.Domain.Entities.User.ApplicationUser");

                    b.Property<string>("TransOfficeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("fullAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("TransOfficeId");

                    b.HasDiscriminator().HasValue("Translators");

                    b.HasData(
                        new
                        {
                            Id = "0fe6fa9e-152d-49d4-8ba6-ceb6875294f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eca1d256-b474-4a5a-9a67-1e428889dff3",
                            ContactNo = "03149276066",
                            Email = "sample.translator@example.com",
                            EmailConfirmed = false,
                            FullName = "Sample Translator",
                            LocalizationLanguage = "English",
                            LockoutEnabled = false,
                            PasswordHash = "hashed_password_here",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b62674c-bf52-4c15-b07f-4e6e1cbf17b7",
                            TwoFactorEnabled = false,
                            TransOfficeId = "e580075e-6b2c-439a-b164-e001877962d6",
                            fullAddress = "Xyz Address"
                        });
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Documents.Feedback", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Guest.Translation.Translation", "translations")
                        .WithMany()
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ALSN.Domain.Entities.Translator.Translators", "translators")
                        .WithMany()
                        .HasForeignKey("TranslatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("translations");

                    b.Navigation("translators");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Documents.TranslationPrice", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Documents.DocumentsType", "DocumentsType")
                        .WithMany()
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentsType");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Tickets.Ticket", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Guest.Guest", "Guest")
                        .WithMany("Tickets")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Translation.Translation", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Documents.DocumentsType", "DocumentRequestType")
                        .WithMany()
                        .HasForeignKey("DocumentRequestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ALSN.Domain.Entities.Guest.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ALSN.Domain.Entities.Guest.Translation.Address", "RequestDeliveryAddresss")
                        .WithMany()
                        .HasForeignKey("RequestDeliveryAddresssId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ALSN.Domain.Entities.Documents.TranslationPrice", "translationPrice")
                        .WithMany()
                        .HasForeignKey("TranslationPriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentRequestType");

                    b.Navigation("Guest");

                    b.Navigation("RequestDeliveryAddresss");

                    b.Navigation("translationPrice");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.TranslationOffice.Order.OrderAssign", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Guest.Translation.Translation", "translation")
                        .WithMany()
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ALSN.Domain.Entities.Translator.Translators", "translators")
                        .WithMany()
                        .HasForeignKey("TranslatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("translation");

                    b.Navigation("translators");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.TranslationOffice.TranslOfficeDetails", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.TranslationOffice.TranslOffice", "transOffice")
                        .WithMany()
                        .HasForeignKey("TranslOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("transOffice");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.BankDetails", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Translator.Translators", "translator")
                        .WithMany()
                        .HasForeignKey("TranslatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("translator");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Language", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Translator.Translators", null)
                        .WithMany("languages")
                        .HasForeignKey("TranslatorsId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Orders.AcceptedOrders", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Guest.Translation.Translation", "translation")
                        .WithMany()
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ALSN.Domain.Entities.Translator.Translators", "translators")
                        .WithMany()
                        .HasForeignKey("translatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("translation");

                    b.Navigation("translators");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Orders.RejectOrder", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.Guest.Translation.Translation", "translation")
                        .WithMany()
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("translation");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.User.Coupons.Coupons", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ALSN.Domain.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Translators", b =>
                {
                    b.HasOne("ALSN.Domain.Entities.TranslationOffice.TranslOffice", "TranslOffice")
                        .WithMany()
                        .HasForeignKey("TransOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TranslOffice");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Guest.Guest", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ALSN.Domain.Entities.Translator.Translators", b =>
                {
                    b.Navigation("languages");
                });
#pragma warning restore 612, 618
        }
    }
}
